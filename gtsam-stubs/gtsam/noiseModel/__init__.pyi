import numpy

from typing import Any
from . import mEstimator

class Base:
    def __init__(self, *args, **kwargs) -> None: ...
    def print_(self, s: str) -> None: ...

class Constrained(Diagonal):
    def __init__(self, *args, **kwargs) -> None: ...
    def All(self, *args, **kwargs) -> Any: ...
    def MixedPrecisions(self, *args, **kwargs) -> Any: ...
    def MixedSigmas(self, *args, **kwargs) -> Any: ...
    def MixedVariances(self, *args, **kwargs) -> Any: ...
    def deserialize(self, serialized: str) -> None: ...
    def serialize(self) -> str: ...
    def unit(self) -> Constrained: ...

class Diagonal(Gaussian):
    def __init__(self, *args, **kwargs) -> None: ...
    def Precisions(self, *args, **kwargs) -> Any: ...
    def R(self) -> numpy.ndarray: ...
    def Sigmas(self, *args, **kwargs) -> Any: ...
    def Variances(self, *args, **kwargs) -> Any: ...
    def deserialize(self, serialized: str) -> None: ...
    def invsigmas(self) -> numpy.ndarray: ...
    def precisions(self) -> numpy.ndarray: ...
    def serialize(self) -> str: ...
    def sigmas(self) -> numpy.ndarray: ...

class Gaussian(Base):
    def __init__(self, *args, **kwargs) -> None: ...
    def Covariance(self, *args, **kwargs) -> Any: ...
    def Information(self, *args, **kwargs) -> Any: ...
    def R(self) -> numpy.ndarray: ...
    def SqrtInformation(self, *args, **kwargs) -> Any: ...
    def Whiten(self, H: numpy.ndarray) -> numpy.ndarray: ...
    def covariance(self) -> numpy.ndarray: ...
    def deserialize(self, serialized: str) -> None: ...
    def equals(self, expected: Base, tol: float) -> bool: ...
    def information(self) -> numpy.ndarray: ...
    def serialize(self) -> str: ...
    def unwhiten(self, v: numpy.ndarray) -> numpy.ndarray: ...
    def whiten(self, v: numpy.ndarray) -> numpy.ndarray: ...

class Isotropic(Diagonal):
    def __init__(self, *args, **kwargs) -> None: ...
    def Precision(self, *args, **kwargs) -> Any: ...
    def Sigma(self, *args, **kwargs) -> Any: ...
    def Variance(self, *args, **kwargs) -> Any: ...
    def deserialize(self, serialized: str) -> None: ...
    def serialize(self) -> str: ...
    def sigma(self) -> float: ...

class Robust(Base):
    def __init__(self, robust: mEstimator.Base, noise: Base) -> None: ...
    def Create(self, *args, **kwargs) -> Any: ...
    def deserialize(self, serialized: str) -> None: ...
    def serialize(self) -> str: ...

class Unit(Isotropic):
    def __init__(self, *args, **kwargs) -> None: ...
    def Create(self, *args, **kwargs) -> Any: ...
    def deserialize(self, serialized: str) -> None: ...
    def serialize(self) -> str: ...
